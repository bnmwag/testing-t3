// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL") // uses connection pooling
}

model Example {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Project {
    id String @id @default(cuid()) @map("_id")

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    finishedAt DateTime?
    dueDate    DateTime

    name        String
    description String?
    status      String  @default("PENDING") // PENDING, IN_PROGRESS, DONE

    tasks  Task[]
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model Task {
    id String @id @default(cuid()) @map("_id")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    description String
    status      String @default("PENDING") // PENDING, IN_PROGRESS, DONE
    priority    String @default("LOW") // LOW, MEDIUM, HIGH

    project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid()) @map("_id")
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
